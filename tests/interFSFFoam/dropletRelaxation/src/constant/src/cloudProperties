/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  9
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "constant";
    object      cloudProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// type        MPPICCloud;
// 
// solution
// {
//     coupled         true;
//     transient       yes;
//     cellValueSourceCorrection on;
// 
//     maxCo           0.1;
// 
//     sourceTerms
//     {
//         schemes
//         {
//             rho             explicit 1;
//             U               explicit 1;
//             Yi              explicit 1;
//             h               explicit 1;
//             radiation       explicit 1;
//         }
//     }
// 
//     interpolationSchemes
//     {
//         thermo:rho.liquid   cell;
//         U                   cellPoint;
//         thermo:mu.liquid    cell;
//         T.liquid            cell;
//         Cp.liquid           cell;
//         kappa               cell;
//         p                   cell;
//         alpha.liquid        cell;
//     }
// 
//     integrationSchemes
//     {
//         U               Euler;
//         T               analitycal;
//     }
// 
//     averagingMethod dual;
// }
// 
// constantProperties
// {
//     rho0            1060;
//     T0              300;
//     Cp0             1110;
// 
//     constantVolume  true;
// }
// 
// subModels
// {
//     particleForces
//     {
// //         ErgunWenYuDrag
// //         {
// //             alphac alpha.liquid;
// //         }
//         PlessisMasliyahDrag
//         {
//             alphac alpha.liquid;
//         }
// //         sphereDrag;
//         gravity;
//     }
// 
//     injectionModels
//     {
//         model1
//         {
//             type            manualInjection;
//             massTotal       0;
//             parcelBasisType fixed;
//             nParticle       1;
//             SOI             0.05;
//             positionsFile   "cloudPositions";
//             U0              (0 0 0);
//             sizeDistribution
//             {
//                 type        fixedValue;
//                 fixedValueDistribution
//                 {
//                     value   0.000025;
//                 }
//             }
//         }
//     }
// 
//     dispersionModel none;
// 
//     patchInteractionModel localInteraction;
// 
//     localInteractionCoeffs
//     {
//         patches
//         (
//             symmetryPlane1
//             {
//                 type rebound;
//                 e    0.97;
//                 mu   0.09;
//             }
//             symmetryPlane2
//             {
//                 type rebound;
//                 e    0.97;
//                 mu   0.09;
//             }
//             bottom
//             {
//                 type rebound;
//                 e    0.97;
//                 mu   0.09;
//             }
//             right
//             {
//                 type rebound;
//                 e    0.97;
//                 mu   0.09;
//             }
//             top
//             {
//                 type rebound;
//                 e    0.97;
//                 mu   0.09;
//             }
//             left
//             {
//                 type rebound;
//                 e    0.97;
//                 mu   0.09;
//             }
//         );
//     }
// 
//     heatTransferModel RanzMarshall;
// 
//     RanzMarshallCoeffs
//     {
//         BirdCorrection  true;
//     }
// 
//     surfaceFilmModel none;
// 
//     packingModel explicit;
// 
//     explicitCoeffs
//     {
//         particleStressModel
//         {
//             type HarrisCrighton;
//             alphaPacked 0.65;
//             pSolid 10.0;
//             beta 2.0;
//             eps 1.0e-7;
//         }
//         correctionLimitingMethod
//         {
//             type absolute;
//             e 0.9;
//         }
//     }
// 
//     implicitCoeffs
//     {
//         alphaMin 0.0001;
//         rhoMin 1.0;
//         applyLimiting true;
//         applyGravity false;
//         particleStressModel
//         {
//             type HarrisCrighton;
//             alphaPacked 0.65;
//             pSolid 5.0;
//             beta 2.0;
//             eps 1.0e-2;
//         }
//     }
// 
//     dampingModel none; // relaxation;
// 
//     relaxationCoeffs
//     {
//         timeScaleModel
//         {
//             type nonEquilibrium;
//             alphaPacked 0.65;
//             e 0.9;
//         }
//     }
// 
//     isotropyModel stochastic;
// 
//     stochasticCoeffs
//     {
//         timeScaleModel
//         {
//             type isotropic;
//             alphaPacked 0.65;
//             e 0.9;
//         }
//     }
// 
//     stochasticCollisionModel none;
// 
//     radiation off;
// }



type        collidingCloud;

solution
{
    coupled         true;
    transient       yes;
    cellValueSourceCorrection off;

    maxCo           0.3;

    sourceTerms
    {
        schemes
        {
            rho             semiImplicit 1;
            U               semiImplicit 1;
            Yi              semiImplicit 1;
            h               semiImplicit 1;
            radiation       semiImplicit 1;
        }
    }

    interpolationSchemes
    {
        thermo:rho.liquid   cell;
        U                   cellPoint;
        thermo:mu.liquid    cell;
        T.liquid            cell;
        Cp.liquid           cell;
        kappa               cell;
        p                   cell;
//         alpha.liquid        cellPoint;
        alphaSmoothed       cellPoint;
        DUcDt               cellPoint;
        curlUcDt            cellPoint;
    }

    integrationSchemes
    {
        U               Euler;
        T               Euler;
    }

    averagingMethod dual;
}

// solution
// {
//     coupled         true;
//     transient       yes;
//     cellValueSourceCorrection off;
// 
//     interpolationSchemes
//     {
//         rho.air         cell;
//         U.air           cellPoint;
//         mu.air          cell;
//         alpha.air       cell;
//     }
// 
//     integrationSchemes
//     {
//         U               Euler;
//     }
// 
//     sourceTerms
//     {
//         schemes
//         {
//             U           semiImplicit 1;
//         }
//     }
// }

constantProperties
{
    parcelTypeId    1;

    rhoMin          1e-15;
    minParcelMass   1e-15;

    rho0            1060;
    youngsModulus   3.2e9;
    poissonsRatio   0.35;

    constantVolume  true;
}

subModels
{
    particleForces
    {
//         Gidaspow, D. (1994).
//         Multiphase flow and fluidisation: continuum and kinetic theory
//         descriptions.
//         Academic press.
//         const scalar alphac =
//             this->alphacInterp().interpolate
//             (
//                 p.coordinates(),
//                 p.currentTetIndices()
//             );
// 
//         if (alphac < 0.8)
//         {
//             return forceSuSp
//             (
//                 Zero,
//                 mass/p.rho()*(150*(1 - alphac)/alphac + 1.75*Re)
//             *muc/(alphac*sqr(p.d()))
//             );
//         }
//         else
//         {
//             return WenYuDragForce<CloudType>::calcCoupled(p, td, dt, mass, Re, muc);
//         }
//         ErgunWenYuDrag
//         {
//             alphac alphaSmoothed;
//         }

//         Du Plessis, J. P., & Masliyah, J. H. (1988).
//         Mathematical modelling of flow through consolidated isotropic porous
//         media.
//         Transport in Porous Media, 3(2), 145-161.
//         const scalar alphac =
//             this->alphacInterp().interpolate
//             (
//                 p.coordinates(),
//                 p.currentTetIndices()
//             );
// 
//         const scalar cbrtAlphap = pow(1 - alphac, 1.0/3.0);
// 
//         const scalar A =
//             26.8*pow3(alphac)
//         /(
//                 sqr(cbrtAlphap)
//             *(1 - cbrtAlphap)
//             *sqr(1 - sqr(cbrtAlphap))
//             + small
//             );
// 
//         const scalar B =
//             sqr(alphac)
//         /sqr(1 - sqr(cbrtAlphap));
// 
//         return forceSuSp
//         (
//             Zero,
//             (mass/p.rho())
//         *(A*(1 - alphac)/alphac + B*Re)*muc/(alphac*sqr(p.d()))
//         );
//         PlessisMasliyahDrag
//         {
//             alphac alphaSmoothed;
//         }

//         Naumann, Z., & Schiller, L. (1935).
//         A drag coefficient correlation.
//         Z Ver Deutsch Ing, 77, 318-323.
//         template<class CloudType>
//         Foam::scalar Foam::SchillerNaumannDragForce<CloudType>::CdRe(const scalar Re)
//         {
//             if (Re > 1000.0)
//             {
//                 return 0.44*Re;
//             }
//             else
//             {
//                 return 24.0*(1.0 + 0.15*pow(Re, 0.687));
//             }
//         }
//         return forceSuSp(Zero, mass*0.75*muc*CdRe(Re)/(p.rho()*sqr(p.d())));
        SchillerNaumannDrag;

//         Amsden, A. A., Butler, T. D., & O'Rourke, P. J. (1987).
//         The KIVA-II computer program for transient multidimensional chemically
//         reactive flows with sprays
//         SAE Technical Paper.
//         template<class CloudType>
//         Foam::scalar Foam::SphereDragForce<CloudType>::CdRe(const scalar Re)
//         {
//             if (Re > 1000.0)
//             {
//                 return 0.424*Re;
//             }
//             else
//             {
//                 return 24.0*(1.0 + 1.0/6.0*pow(Re, 2.0/3.0));
//             }
//         }
//         return forceSuSp(Zero, mass*0.75*muc*CdRe(Re)/(p.rho()*sqr(p.d())));
//         sphereDrag;

//         Gidaspow, D. (1994).
//         Multiphase flow and fluidisation: continuum and kinetic theory
//         descriptions.
//         Academic press.
//         const scalar alphac =
//             this->alphacInterp().interpolate
//             (
//                 p.coordinates(),
//                 p.currentTetIndices()
//             );
//         const scalar CdRe = SchillerNaumannDragForce<CloudType>::CdRe(alphac*Re);
// 
//         return forceSuSp
//         (
//             Zero,
//             0.75*(mass/p.rho())*CdRe*muc*pow(alphac, -2.65)/(alphac*sqr(p.d()))
//         );
//         WenYuDrag
//         {
//             alphac alpha.liquid;
//         }

        virtualMass
        {
            Cvm 0.5;
        }

//         pressureGradient
//         {
//             U   U;
//         }

        SaffmanMeiLiftForce;
        
        gravity;
    }

    injectionModels
    {
        model1
        {
            type            manualInjection;
            massTotal       0;
            parcelBasisType fixed;
            nParticle       1;
            SOI             0;
            positionsFile   "cloudPositions";
            U0              (0 0 0);
            sizeDistribution
            {
                type        fixedValue;
                fixedValueDistribution
                {
                    value   0.000025;
                }
            }
        }
    }

    dispersionModel none;

    patchInteractionModel   localInteraction;

    localInteractionCoeffs
    {
        patches
        (
            symmetryPlane1
            {
                type rebound;
//                 e    0.99;
//                 mu   0.01;
            }
            symmetryPlane2
            {
                type rebound;
//                 e    0.99;
//                 mu   0.01;
            }
            bottom
            {
                type rebound;
//                 e    0.99;
//                 mu   0.01;
            }
            right
            {
                type rebound;
//                 e    0.99;
//                 mu   0.01;
            }
            top
            {
                type escape;
//                 type rebound;
//                 e    0.99;
//                 mu   0.01;
            }
            left
            {
                type rebound;
//                 e    0.99;
//                 mu   0.01;
            }
        );
    }

    heatTransferModel   none;

    surfaceFilmModel    none;

    collisionModel      pairCollision;

    pairCollisionCoeffs
    {
        maxInteractionDistance  0.000025;

        writeReferredParticleCloud no;

        pairModel pairSpringSliderDashpot;

        pairSpringSliderDashpotCoeffs
        {
            useEquivalentSize           no;
            alpha                       0.5;
            b                           1.5;
            mu                          0.52;
            cohesionEnergyDensity       1000;
//             cohesionEnergyDensity 4.0e8;
            collisionResolutionSteps    12;
        };

        wallModel wallSpringSliderDashpot;

        wallSpringSliderDashpotCoeffs
        {
            useEquivalentSize           no;
            collisionResolutionSteps    12;
            youngsModulus               3.2e9;
            poissonsRatio               0.35;
            alpha                       0.5;
            b                           1.5;
            mu                          0.52;
            cohesionEnergyDensity       1000;
//             cohesionEnergyDensity 4.0e8;
        };

        U     U;
    }

    stochasticCollisionModel none;

    radiation off;
}

cloudFunctions
{}


// ************************************************************************* //
